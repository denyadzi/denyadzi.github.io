<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Stm32f4discovery | Blog on embedded programming]]></title>
  <link href="http://denyadzi.github.io/blog/categories/stm32f4discovery/atom.xml" rel="self"/>
  <link href="http://denyadzi.github.io/"/>
  <updated>2014-12-25T11:31:37+03:00</updated>
  <id>http://denyadzi.github.io/</id>
  <author>
    <name><![CDATA[Dzianis Yatskevich]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Neccessary Tools for Stm32f4discovery]]></title>
    <link href="http://denyadzi.github.io/blog/2014/12/25/installing-neccessary-tools-for-stm32f4discovery/"/>
    <updated>2014-12-25T07:12:20+03:00</updated>
    <id>http://denyadzi.github.io/blog/2014/12/25/installing-neccessary-tools-for-stm32f4discovery</id>
    <content type="html"><![CDATA[<p>Hello everyone! This post starts my <a href="http://www.st.com/web/catalog/tools/FM116/SC959/SS1532/LN1848/PF252419?s_searchtype=partnumber">stm32f4discovery</a> learning experience story. This board truely deserves only good words to describe with. Big thanks to ST. That&rsquo;s the one I have: <img src="/public/images/tools/stm32f4DISCOVERY.JPG"></p>

<!--more-->


<p>The trip to the dark side is a comparatevely low level experience. It&rsquo;s like a trip to the wild where we need to use a kind of primitive tools. I think it is the right way of learning - especially at the beginning. I mean - no IDE. Lets leave IDE for rapid development.</p>

<p>In this post we&rsquo;re going to install tools under gnu/linux (mb it will be possible to install them for windows too) needed to make binaries for our ARM processor, load, debug them and have fun of everything working.</p>

<p>So, these tools are:</p>

<ul>
<li>a toolchain built for arm-architecture (<a href="https://en.wikipedia.org/wiki/GNU_toolchain">GNU toolchain</a>)</li>
<li>a programmer (not another one person but a software driver for embedded in stm32f4discovery piece of hardware called <a href="http://www.st.com/web/en/catalog/tools/FM146/CL1984/SC720/SS1450/PF251168?s_searchtype=reco">STLink</a></li>
</ul>


<p>I&rsquo;ve tested the following on Debian 7 Wheezy 64bit and on Fedora 15 32bit.</p>

<h2>Toolchain</h2>

<p>Debian users can refer to <a href="https://wiki.debian.org/EmdebianToolchain">this</a> tutorial to manage the toolchain installation.</p>

<p>I preferred more universal way, though. Thanks to <a href="https://launchpad.net/~team-gcc-arm-embedded">GCC ARM Embedded Maintainers team</a> we&rsquo;ve got <a href="https://launchpad.net/gcc-arm-embedded">this pre-built toolchain</a>. We just download, unpack, add bin folder to PATH and it&rsquo;s done. The one thing to mention for 64bit OS users is that 32bit libc and libncurses are needed for this toolchain to work (see the <a href="https://launchpadlibrarian.net/192227680/readme.txt">readme.txt</a> for more detailed instructions).</p>

<p>To test our toolchain lets write a little assembly code:</p>

<p><figure class='code'><figcaption><span> (test.S)</span> <a href='/public/code/tools/test.S'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Gas'><span class='line'><span class="na">.section</span>    <span class="no">.text</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="no">r0</span><span class="p">,</span> <span class="c">#0xFF</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Then, in the console :</p>

<pre><code class="bash">$ arm-none-eabi-as -mthumb -mcpu=cortex-m4 -o test.o test.S
</code></pre>

<p>In this command we tell the assembler that we&rsquo;re using <a href="http://en.wikipedia.org/wiki/ARM_architecture#Thumb">thumb instruction set</a> and we&rsquo;re writing code for <a href="http://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M4">Cortex-M4 core</a>. If no complains from command line - we&rsquo;re done with the toolchain.</p>

<h2>STLink</h2>

<p>To get STLink working is also fairly simple. It can be found on a <a href="https://github.com/texane/stlink">github repository</a>. Dependencies we need to resolve are: libusb (of version >=1.0), libusb-dev and pkg-config packages. Please consult the <a href="https://github.com/texane/stlink/blob/master/README">README</a> file for detailed instructions.</p>

<p>To test st-link tools being installed correctly, add the STLink installation directory into your PATH environment variable and just type in the console:
<code>bash
$ st-flash
</code>
And the response you should get is like:
<code>
invalid command line
stlinkv1 command line: ./flash [--debug] [--reset] {read|write} /dev/sgX path addr &lt;size&gt;
stlinkv1 command line: ./flash [--debug] /dev/sgX erase
stlinkv2 command line: ./flash [--debug] [--reset] {read|write} path addr &lt;size&gt;
stlinkv2 command line: ./flash [--debug] erase
                       use hex format for addr and &lt;size&gt;
</code></p>

<p>That&rsquo;s it. Next step is to write a traditional leds-blinking program. Feel free to contact me if you have smth to ask or talk about</p>
]]></content>
  </entry>
  
</feed>
